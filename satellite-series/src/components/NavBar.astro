
---
import FilterModal from "./FilterModal.astro";

const loggedIn = false;
const { user }: any = Astro.locals;



---

  <nav class="bg-white dark:bg-gray-900 fixed w-full z-20 top-0 start-0 border-b border-gray-200 dark:border-gray-600">
    <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">

      <div class="flex md:order-1">
        <button type="button" id="filters-button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm p-2.5 text-center inline-flex items-center me-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
          <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M1 5h1.424a3.228 3.228 0 0 0 6.152 0H19a1 1 0 1 0 0-2H8.576a3.228 3.228 0 0 0-6.152 0H1a1 1 0 1 0 0 2Zm18 4h-1.424a3.228 3.228 0 0 0-6.152 0H1a1 1 0 1 0 0 2h10.424a3.228 3.228 0 0 0 6.152 0H19a1 1 0 0 0 0-2Zm0 6H8.576a3.228 3.228 0 0 0-6.152 0H1a1 1 0 0 0 0 2h1.424a3.228 3.228 0 0 0 6.152 0H19a1 1 0 0 0 0-2Z"/>
        </svg>
          <span class="sr-only">Icon description</span>
          </button>
        <div class="hidden md:block relative">
          <!-- Desktop search input -->
           
          <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
            <!-- Search icon -->
          </div>
          <input 
            type="text" 
            id="search-navbar" 
            class="block w-96 p-2 ps-10 text-lg text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
            placeholder="Search..." 

          />
        </div>
      </div>
      <div class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1" id="navbar-menu">
        <!-- Navbar menu items -->
        <ul class="flex flex-col p-4 md:p-0 mt-4 font-medium border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
          <li>
            <a href="/" class="block py-2 px-3 text-white bg-blue-700 rounded md:bg-transparent md:text-blue-700 md:p-0 md:dark:text-blue-500" aria-current="page">Home</a>
          </li>

          <!-- Conditional rendering based on loggedIn status -->
          {user ?
            <>
          <li>
            <a href="/addSeries" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">Add series</a>
          </li>
          <form action="/api/auth/logout" method="post">
                <button type="submit" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700" aria-label="Log out">Log out</button>
              </form>
            </>
            :
            <>
              <li>
                <a href="/login" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">Log in</a>
              </li>
              <li>
                <a href="/register" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">Register</a>
              </li>
            </>
          }
        </ul>
      </div>
    </div>
  </nav>

  <FilterModal />



  <script>
    import { isModalOpen, categoryFilter, serviceFilter, minRatingFilter, maxRatingFilter, titleFilter } from '../stores/SearchStore';
  
    const navigateToSeries = () => {
      const searchValue = titleFilter.get();
      const categoryValue = categoryFilter.get();
      const serviceValue = serviceFilter.get();
      const minRatingValue = minRatingFilter.get();
      const maxRatingValue = maxRatingFilter.get();
      const url = new URL('/', window.location.origin);
      if (searchValue) url.searchParams.append('title', searchValue);
      if (categoryValue) url.searchParams.append('category', categoryValue);
      if (serviceValue) url.searchParams.append('service', serviceValue);
      if (minRatingValue) url.searchParams.append('minRating', minRatingValue);
      if (maxRatingValue) url.searchParams.append('maxRating', maxRatingValue);
      window.location.href = url.toString();
    };
  
    function setTitleFilter(value) {
      titleFilter.set(value);
    }
  
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-navbar');
      const filtersButton = document.getElementById('filters-button');
      if (searchInput) {
        searchInput.addEventListener('input', (e:any) => {
          const searchValue = e?.target?.value || "";
          setTitleFilter(searchValue);
        });
  
        searchInput.addEventListener('keypress', (e:any) => {
          if (e.key === 'Enter') {
            navigateToSeries();
          }
        });
  
        const searchButton = document.querySelector('button[aria-label="Search"]');
        if (searchButton) {
          searchButton.addEventListener('click', () => {
            navigateToSeries();
          });
        }
      }
      if(filtersButton){
        filtersButton.addEventListener('click', () => {

          isModalOpen.set(true);

        });
      }
    });
  </script>