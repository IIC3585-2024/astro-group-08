---

const { series } = Astro.props;
const { user }: any = Astro.locals;
---
{user ?
<div class="mb-6">
  <form class="max-w-sm pr-2 flex-grow" method="post" action="/api/reviews" id="review-form">
    <label for="large-input" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ingrese su review</label>
    <input type="text" name="content" id="large-input" class="block w-full p-4 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-base focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
    <div class ="pt-2 flex flex-row">
        

            <select id="countries" name="rating" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" required>
              <option value="" disabled selected>Score</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
            </select>
            <input 
            type="hidden" 
            id="seriesId"
            name="seriesId" 
            value={series.id}
          >
    <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Save</button>
  </form>

  </div>

</div> : <div class="text-center text-white">Log in to add a review</div>}

<script>

  document.addEventListener('DOMContentLoaded', () => {
    const reviewForm = document.getElementById('review-form') as any;



    if(reviewForm)
    reviewForm.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent the default form submission

      const formData = new FormData(reviewForm);
      try {
        const response = await fetch(reviewForm.action, {
          method: 'POST',
          body: formData
        });

        const result = await response.json();
        if (response.ok) {
          alert('Review added successfully');
          reviewForm.reset();
          updateSeriesRating(result.seriesId);
          window.location.href = `/series/${result.seriesId}`;

        } else {
          alert('Error adding review');
        }
      } catch (error) {
        alert('Error adding review');
        console.log(error);
      }
    });
  });

  async function updateSeriesRating(seriesId){
    try {
      const response = await fetch("/api/series", {
          method: 'PUT',
          body: JSON.stringify({
            seriesId: seriesId
          })
        });
    }
    catch (error){
      console.log(error);
    }
  }
</script>
